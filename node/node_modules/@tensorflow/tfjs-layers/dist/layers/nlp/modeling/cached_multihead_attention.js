/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 *  Cached MHA layer based on `MultiHeadAttention`.
 */
/* Original source: keras_nlp/layers/modeling/cached_multi_head_attention.py */
import { serialization } from '@tensorflow/tfjs-core';
import { MultiHeadAttention } from '../multihead_attention';
import { NotImplementedError } from '../../../errors';
/**
 * MultiHeadAttention layer with cache support.
 *
 * This layer is suitable for use in autoregressive decoding. It can be use
 * to cache decoder self-attention and cross-attention. The forward pass
 * can happen in one of three modes:
 * - No cache, same as regular multi-head attention.
 * - Static cache (`cacheUpdateIndex` is None). In this case, the
 *     cached key/value projections will be used and the input values will
 *     be ignored.
 * - Updated cache (`cacheUpdateIndex` is not None). In this case, new
 *     key/value projections are computed using the input, and spliced into
 *     the cache at the specified index.
 *
 * Note that caching is useful only during inference and should not be used
 * during training.
 *
 * We use the notation `B`, `T`, `S` below, where `B` is the batch dimension,
 * `T` is the target sequence length, and `S` in the source sequence length.
 * Note that during generative decoding, `T` is usually 1 (you are
 * generating a target sequence of length one to predict the next token).
 *
 * Returns:
 *     An `(attentionOutput, cache)` tuple. `attentionOutput` is the result
 *     of the computation, of shape `(B, T, dim)`, where `T` is for target
 *     sequence shapes and `dim` is the query input last dimension if
 *     `outputShape` is `null`. Otherwise, the multi-head outputs are
 *     projected to the shape specified by `outputShape`. `cache` is the
 *     updated cache.
 */
export class CachedMultiHeadAttention extends MultiHeadAttention {
    call(query, kwargs) {
        return this.callAndReturnCache(query, kwargs)[0];
    }
    /**
     * Exactly like `call` except also returns the updated cache.
     */
    callAndReturnCache(query, kwargs) {
        throw new NotImplementedError(`Not implemented yet.`);
    }
}
serialization.registerClass(CachedMultiHeadAttention);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkX211bHRpaGVhZF9hdHRlbnRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvbGF5ZXJzL25scC9tb2RlbGluZy9jYWNoZWRfbXVsdGloZWFkX2F0dGVudGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSDs7R0FFRztBQUVILCtFQUErRTtBQUMvRSxPQUFPLEVBQThCLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRWxGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBaUR0RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E2Qkc7QUFDSCxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsa0JBQWtCO0lBRXJELElBQUksQ0FDWCxLQUFhLEVBQUUsTUFBdUM7UUFFdEQsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7T0FFRztJQUNILGtCQUFrQixDQUNoQixLQUFhLEVBQUUsTUFBdUM7UUFFdEQsTUFBTSxJQUFJLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGO0FBQ0QsYUFBYSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vKipcbiAqICBDYWNoZWQgTUhBIGxheWVyIGJhc2VkIG9uIGBNdWx0aUhlYWRBdHRlbnRpb25gLlxuICovXG5cbi8qIE9yaWdpbmFsIHNvdXJjZToga2VyYXNfbmxwL2xheWVycy9tb2RlbGluZy9jYWNoZWRfbXVsdGlfaGVhZF9hdHRlbnRpb24ucHkgKi9cbmltcG9ydCB7IFRlbnNvciwgVGVuc29yMUQsIFRlbnNvcjJELCBzZXJpYWxpemF0aW9uIH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHsgTXVsdGlIZWFkQXR0ZW50aW9uIH0gZnJvbSAnLi4vbXVsdGloZWFkX2F0dGVudGlvbic7XG5pbXBvcnQgeyBOb3RJbXBsZW1lbnRlZEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJztcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIENhY2hlZE11bHRpSGVhZEF0dGVudGlvbk9wdGlvbnMge1xuICAvKipcbiAgICogUXVlcnkgYFRlbnNvcmAgb2Ygc2hhcGUgYChCLCBULCBkaW0pYC5cbiAgICovXG5cbiAgLyoqXG4gICAqIFZhbHVlIGBUZW5zb3JgIG9mIHNoYXBlIGAoQiwgUyosIGRpbSlgLiBJZiBgY2FjaGVgIGlzIGBudWxsYCwgYFMqYFxuICAgKiBtdXN0IGVxdWFsIGBTYCBhbmQgbWF0Y2ggdGhlIHNoYXBlIG9mIGBhdHRlbnRpb25NYXNrYC4gSWYgYGNhY2hlYCBpc1xuICAgKiBub3QgYG51bGxgLCBgUypgIGNhbiBiZSBhbnkgbGVuZ3RoIGxlc3MgdGhhbiBgU2AsIGFuZCB0aGUgY29tcHV0ZWRcbiAgICogdmFsdWUgd2lsbCBiZSBzcGxpY2VkIGludG8gYGNhY2hlYCBhdCBgY2FjaGVVcGRhdGVJbmRleGAuXG4gICAqL1xuICB2YWx1ZTogVGVuc29yO1xuXG4gIC8qKlxuICAgKiBLZXkgYFRlbnNvcmAgb2Ygc2hhcGUgYChCLCBTKiwgZGltKWAuICBJZiBgY2FjaGVgIGlzIGBudWxsYCwgYFMqYCBtdXN0XG4gICAqIGVxdWFsIGBTYCBhbmQgbWF0Y2ggdGhlIHNoYXBlIG9mIGBhdHRlbnRpb25NYXNrYC4gSWYgYGNhY2hlYCBpcyBub3QgYG51bGxgLFxuICAgKiBgUypgIGNhbiBiZSBhbnkgbGVuZ3RoIGxlc3MgdGhhbiBgU2AsIGFuZCB0aGUgY29tcHV0ZWQgdmFsdWUgd2lsbCBiZVxuICAgKiBzcGxpY2VkIGludG8gYGNhY2hlYCBhdCBgY2FjaGVVcGRhdGVJbmRleGAuXG4gICAqL1xuICBrZXk/OiBUZW5zb3I7XG5cbiAgLyoqXG4gICAqIEEgYm9vbGVhbiBtYXNrIG9mIHNoYXBlIGAoQiwgVCwgUylgLiBgYXR0ZW50aW9uTWFza2AgcHJldmVudHNcbiAgICogYXR0ZW50aW9uIHRvIGNlcnRhaW4gcG9zaXRpb25zLiBUaGUgYm9vbGVhbiBtYXNrIHNwZWNpZmllcyB3aGljaFxuICAgKiBxdWVyeSBlbGVtZW50cyBjYW4gYXR0ZW5kIHRvIHdoaWNoIGtleSBlbGVtZW50cywgMSBpbmRpY2F0ZXNcbiAgICogYXR0ZW50aW9uIGFuZCAwIGluZGljYXRlcyBubyBhdHRlbnRpb24uIEJyb2FkY2FzdGluZyBjYW4gaGFwcGVuIGZvclxuICAgKiB0aGUgbWlzc2luZyBiYXRjaCBkaW1lbnNpb25zIGFuZCB0aGUgaGVhZCBkaW1lbnNpb24uXG4gICAqL1xuICBhdHRlbnRpb25NYXNrPzogVGVuc29yO1xuXG4gIC8qKlxuICAgKiBBIGRlbnNlIGZsb2F0IFRlbnNvci4gVGhlIGtleS92YWx1ZSBjYWNoZSwgb2Ygc2hhcGVcbiAgICogYFtCLCAyLCBTLCBudW1IZWFkcywga2V5RGltc11gLCB3aGVyZSBgU2AgbXVzdCBhZ3JlZSB3aXRoIHRoZVxuICAgKiBgYXR0ZW50aW9uTWFza2Agc2hhcGUuIFRoaXMgYXJndW1lbnQgaXMgaW50ZW5kZWQgZm9yIHVzZSBkdXJpbmdcbiAgICogZ2VuZXJhdGlvbiB0byBhdm9pZCByZWNvbXB1dGluZyBpbnRlcm1lZGlhdGUgc3RhdGUuXG4gICAqL1xuICBjYWNoZT86IFRlbnNvcjtcblxuICAvKipcbiAgICogSW50ZWdlciBvciBJbnRlZ2VyIGBUZW5zb3JgLiBUaGUgaW5kZXggYXQgd2hpY2ggdG8gdXBkYXRlIGBjYWNoZWBcbiAgICogKHVzdWFsbHkgdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IHRva2VuIGJlaW5nIHByb2Nlc3NlZCB3aGVuIHJ1bm5pbmdcbiAgICogZ2VuZXJhdGlvbikuIElmIGBjYWNoZVVwZGF0ZUluZGV4PW51bGxgIHdoaWxlIGBjYWNoZWAgaXMgc2V0LCB0aGUgY2FjaGVcbiAgICogd2lsbCBub3QgYmUgdXBkYXRlZC5cbiAgICovXG4gIGNhY2hlVXBkYXRlSW5kZXg/OiBudW1iZXJ8VGVuc29yO1xufVxuXG4vKipcbiAqIE11bHRpSGVhZEF0dGVudGlvbiBsYXllciB3aXRoIGNhY2hlIHN1cHBvcnQuXG4gKlxuICogVGhpcyBsYXllciBpcyBzdWl0YWJsZSBmb3IgdXNlIGluIGF1dG9yZWdyZXNzaXZlIGRlY29kaW5nLiBJdCBjYW4gYmUgdXNlXG4gKiB0byBjYWNoZSBkZWNvZGVyIHNlbGYtYXR0ZW50aW9uIGFuZCBjcm9zcy1hdHRlbnRpb24uIFRoZSBmb3J3YXJkIHBhc3NcbiAqIGNhbiBoYXBwZW4gaW4gb25lIG9mIHRocmVlIG1vZGVzOlxuICogLSBObyBjYWNoZSwgc2FtZSBhcyByZWd1bGFyIG11bHRpLWhlYWQgYXR0ZW50aW9uLlxuICogLSBTdGF0aWMgY2FjaGUgKGBjYWNoZVVwZGF0ZUluZGV4YCBpcyBOb25lKS4gSW4gdGhpcyBjYXNlLCB0aGVcbiAqICAgICBjYWNoZWQga2V5L3ZhbHVlIHByb2plY3Rpb25zIHdpbGwgYmUgdXNlZCBhbmQgdGhlIGlucHV0IHZhbHVlcyB3aWxsXG4gKiAgICAgYmUgaWdub3JlZC5cbiAqIC0gVXBkYXRlZCBjYWNoZSAoYGNhY2hlVXBkYXRlSW5kZXhgIGlzIG5vdCBOb25lKS4gSW4gdGhpcyBjYXNlLCBuZXdcbiAqICAgICBrZXkvdmFsdWUgcHJvamVjdGlvbnMgYXJlIGNvbXB1dGVkIHVzaW5nIHRoZSBpbnB1dCwgYW5kIHNwbGljZWQgaW50b1xuICogICAgIHRoZSBjYWNoZSBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICpcbiAqIE5vdGUgdGhhdCBjYWNoaW5nIGlzIHVzZWZ1bCBvbmx5IGR1cmluZyBpbmZlcmVuY2UgYW5kIHNob3VsZCBub3QgYmUgdXNlZFxuICogZHVyaW5nIHRyYWluaW5nLlxuICpcbiAqIFdlIHVzZSB0aGUgbm90YXRpb24gYEJgLCBgVGAsIGBTYCBiZWxvdywgd2hlcmUgYEJgIGlzIHRoZSBiYXRjaCBkaW1lbnNpb24sXG4gKiBgVGAgaXMgdGhlIHRhcmdldCBzZXF1ZW5jZSBsZW5ndGgsIGFuZCBgU2AgaW4gdGhlIHNvdXJjZSBzZXF1ZW5jZSBsZW5ndGguXG4gKiBOb3RlIHRoYXQgZHVyaW5nIGdlbmVyYXRpdmUgZGVjb2RpbmcsIGBUYCBpcyB1c3VhbGx5IDEgKHlvdSBhcmVcbiAqIGdlbmVyYXRpbmcgYSB0YXJnZXQgc2VxdWVuY2Ugb2YgbGVuZ3RoIG9uZSB0byBwcmVkaWN0IHRoZSBuZXh0IHRva2VuKS5cbiAqXG4gKiBSZXR1cm5zOlxuICogICAgIEFuIGAoYXR0ZW50aW9uT3V0cHV0LCBjYWNoZSlgIHR1cGxlLiBgYXR0ZW50aW9uT3V0cHV0YCBpcyB0aGUgcmVzdWx0XG4gKiAgICAgb2YgdGhlIGNvbXB1dGF0aW9uLCBvZiBzaGFwZSBgKEIsIFQsIGRpbSlgLCB3aGVyZSBgVGAgaXMgZm9yIHRhcmdldFxuICogICAgIHNlcXVlbmNlIHNoYXBlcyBhbmQgYGRpbWAgaXMgdGhlIHF1ZXJ5IGlucHV0IGxhc3QgZGltZW5zaW9uIGlmXG4gKiAgICAgYG91dHB1dFNoYXBlYCBpcyBgbnVsbGAuIE90aGVyd2lzZSwgdGhlIG11bHRpLWhlYWQgb3V0cHV0cyBhcmVcbiAqICAgICBwcm9qZWN0ZWQgdG8gdGhlIHNoYXBlIHNwZWNpZmllZCBieSBgb3V0cHV0U2hhcGVgLiBgY2FjaGVgIGlzIHRoZVxuICogICAgIHVwZGF0ZWQgY2FjaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYWNoZWRNdWx0aUhlYWRBdHRlbnRpb24gZXh0ZW5kcyBNdWx0aUhlYWRBdHRlbnRpb24ge1xuXG4gIG92ZXJyaWRlIGNhbGwoXG4gICAgcXVlcnk6IFRlbnNvciwga3dhcmdzOiBDYWNoZWRNdWx0aUhlYWRBdHRlbnRpb25PcHRpb25zXG4gICk6IFRlbnNvcnxUZW5zb3IyRCB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbEFuZFJldHVybkNhY2hlKHF1ZXJ5LCBrd2FyZ3MpWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4YWN0bHkgbGlrZSBgY2FsbGAgZXhjZXB0IGFsc28gcmV0dXJucyB0aGUgdXBkYXRlZCBjYWNoZS5cbiAgICovXG4gIGNhbGxBbmRSZXR1cm5DYWNoZShcbiAgICBxdWVyeTogVGVuc29yLCBrd2FyZ3M6IENhY2hlZE11bHRpSGVhZEF0dGVudGlvbk9wdGlvbnNcbiAgKTogW1RlbnNvcjFEfFRlbnNvcjJELCBUZW5zb3IxRHxUZW5zb3IyRF0ge1xuICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKGBOb3QgaW1wbGVtZW50ZWQgeWV0LmApO1xuICB9XG59XG5zZXJpYWxpemF0aW9uLnJlZ2lzdGVyQ2xhc3MoQ2FjaGVkTXVsdGlIZWFkQXR0ZW50aW9uKTtcbiJdfQ==