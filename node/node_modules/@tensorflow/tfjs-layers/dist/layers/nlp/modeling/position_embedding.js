/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 *  Position embedding implementation based on `tf.layers.Layer`.
 */
/* Original source: keras_nlp/layers/modeling/position_embedding.py */
import { serialization } from '@tensorflow/tfjs-core';
import { Layer } from '../../../engine/topology';
import { NotImplementedError } from '../../../errors';
/**
 * A layer which learns a position embedding for input sequences.
 *
 * This class assumes that in the input tensor, the last dimension corresponds
 * to the features, and the dimension before the last corresponds to the
 * sequence.
 *
 * Examples:
 *
 * Called directly on input.
 * ```js
 * const layer = new PositionEmbedding({sequenceLength=10});
 * layer.call(tf.zeros([8, 10, 16]));
 * ```
 *
 * Combine with a token embedding.
 * ```js
 * const seqLength = 50;
 * const vocabSize = 5000;
 * const embedDim = 128;
 * const inputs = tf.input({shape: [seqLength]});
 * const tokenEmbeddings = tf.layers.embedding({
 *     inputDim=vocabSize, outputDim=embedDim
 * }).apply(inputs);
 * const positionEmbeddings = new PositionEmbedding({
 *     sequenceLength: seqLength
 * }).apply(tokenEmbeddings);
 * const outputs = tf.add(tokenEmbeddings, positionEmbeddings);
 * ```
 *
 * Reference:
 *  - [Devlin et al., 2019](https://arxiv.org/abs/1810.04805)
 */
class PositionEmbedding extends Layer {
    constructor(args) {
        super(args);
        throw new NotImplementedError('PositionEmbedding not implemented yet.');
    }
    getConfig() {
        throw new NotImplementedError('Not implemented yet.');
    }
    build(inputShape) {
        throw new NotImplementedError('Not implemented yet.');
    }
    call(inputs, kwargs = { startIndex: 0 }) {
        throw new NotImplementedError('Not implemented yet.');
    }
}
/** @nocollapse */
PositionEmbedding.className = 'PositionEmbedding';
export { PositionEmbedding };
serialization.registerClass(PositionEmbedding);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb25fZW1iZWRkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL2xheWVycy9ubHAvbW9kZWxpbmcvcG9zaXRpb25fZW1iZWRkaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVIOztHQUVHO0FBRUgsc0VBQXNFO0FBQ3RFLE9BQU8sRUFBOEIsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHbEYsT0FBTyxFQUFFLEtBQUssRUFBYSxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBd0J0RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQ0c7QUFDSCxNQUFhLGlCQUFrQixTQUFRLEtBQUs7SUFJMUMsWUFBWSxJQUEyQjtRQUNyQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFWixNQUFNLElBQUksbUJBQW1CLENBQUMsd0NBQXdDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRVEsU0FBUztRQUNoQixNQUFNLElBQUksbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRVEsS0FBSyxDQUFDLFVBQTJCO1FBQ3hDLE1BQU0sSUFBSSxtQkFBbUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFUSxJQUFJLENBQ1gsTUFBdUIsRUFDdkIsU0FBaUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFDO1FBRWhELE1BQU0sSUFBSSxtQkFBbUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3hELENBQUM7O0FBdEJELGtCQUFrQjtBQUNGLDJCQUFTLEdBQUcsbUJBQW1CLENBQUM7U0FGckMsaUJBQWlCO0FBeUI5QixhQUFhLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbi8qKlxuICogIFBvc2l0aW9uIGVtYmVkZGluZyBpbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBgdGYubGF5ZXJzLkxheWVyYC5cbiAqL1xuXG4vKiBPcmlnaW5hbCBzb3VyY2U6IGtlcmFzX25scC9sYXllcnMvbW9kZWxpbmcvcG9zaXRpb25fZW1iZWRkaW5nLnB5ICovXG5pbXBvcnQgeyBUZW5zb3IsIFRlbnNvcjFELCBUZW5zb3IyRCwgc2VyaWFsaXphdGlvbiB9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5cbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4va2VyYXNfZm9ybWF0L2NvbW1vbic7XG5pbXBvcnQgeyBMYXllciwgTGF5ZXJBcmdzIH0gZnJvbSAnLi4vLi4vLi4vZW5naW5lL3RvcG9sb2d5JztcbmltcG9ydCB7IE5vdEltcGxlbWVudGVkRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHsgSW5pdGlhbGl6ZXJJZGVudGlmaWVyIH0gZnJvbSAnLi4vLi4vLi4vaW5pdGlhbGl6ZXJzJztcblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFBvc2l0aW9uRW1iZWRkaW5nQXJncyBleHRlbmRzIExheWVyQXJncyB7XG4gIC8qKlxuICAgKiBJbnRlZ2VyLiBUaGUgbWF4aW11bSBsZW5ndGggb2YgdGhlIGR5bmFtaWMgc2VxdWVuY2UuXG4gICAqL1xuICBzZXF1ZW5jZUxlbmd0aDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5pdGlhbGl6ZXIgdG8gdXNlIGZvciB0aGUgZW1iZWRkaW5nIHdlaWdodHMuXG4gICAqIERlZmF1bHRzIHRvIGBcImdsb3JvdFVuaWZvcm1cImAuXG4gICAqL1xuICBpbml0aWFsaXplcj86IEluaXRpYWxpemVySWRlbnRpZmllcjtcbn1cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFBvc2l0aW9uRW1iZWRkaW5nT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBJbnRlZ2VyLiBJbmRleCB0byBzdGFydCB0aGUgcG9zaXRpb24gZW1iZWRkaW5ncyBhdC5cbiAgICogRGVmYXVsdHMgdG8gMC5cbiAgICovXG4gIHN0YXJ0SW5kZXg/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQSBsYXllciB3aGljaCBsZWFybnMgYSBwb3NpdGlvbiBlbWJlZGRpbmcgZm9yIGlucHV0IHNlcXVlbmNlcy5cbiAqXG4gKiBUaGlzIGNsYXNzIGFzc3VtZXMgdGhhdCBpbiB0aGUgaW5wdXQgdGVuc29yLCB0aGUgbGFzdCBkaW1lbnNpb24gY29ycmVzcG9uZHNcbiAqIHRvIHRoZSBmZWF0dXJlcywgYW5kIHRoZSBkaW1lbnNpb24gYmVmb3JlIHRoZSBsYXN0IGNvcnJlc3BvbmRzIHRvIHRoZVxuICogc2VxdWVuY2UuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogQ2FsbGVkIGRpcmVjdGx5IG9uIGlucHV0LlxuICogYGBganNcbiAqIGNvbnN0IGxheWVyID0gbmV3IFBvc2l0aW9uRW1iZWRkaW5nKHtzZXF1ZW5jZUxlbmd0aD0xMH0pO1xuICogbGF5ZXIuY2FsbCh0Zi56ZXJvcyhbOCwgMTAsIDE2XSkpO1xuICogYGBgXG4gKlxuICogQ29tYmluZSB3aXRoIGEgdG9rZW4gZW1iZWRkaW5nLlxuICogYGBganNcbiAqIGNvbnN0IHNlcUxlbmd0aCA9IDUwO1xuICogY29uc3Qgdm9jYWJTaXplID0gNTAwMDtcbiAqIGNvbnN0IGVtYmVkRGltID0gMTI4O1xuICogY29uc3QgaW5wdXRzID0gdGYuaW5wdXQoe3NoYXBlOiBbc2VxTGVuZ3RoXX0pO1xuICogY29uc3QgdG9rZW5FbWJlZGRpbmdzID0gdGYubGF5ZXJzLmVtYmVkZGluZyh7XG4gKiAgICAgaW5wdXREaW09dm9jYWJTaXplLCBvdXRwdXREaW09ZW1iZWREaW1cbiAqIH0pLmFwcGx5KGlucHV0cyk7XG4gKiBjb25zdCBwb3NpdGlvbkVtYmVkZGluZ3MgPSBuZXcgUG9zaXRpb25FbWJlZGRpbmcoe1xuICogICAgIHNlcXVlbmNlTGVuZ3RoOiBzZXFMZW5ndGhcbiAqIH0pLmFwcGx5KHRva2VuRW1iZWRkaW5ncyk7XG4gKiBjb25zdCBvdXRwdXRzID0gdGYuYWRkKHRva2VuRW1iZWRkaW5ncywgcG9zaXRpb25FbWJlZGRpbmdzKTtcbiAqIGBgYFxuICpcbiAqIFJlZmVyZW5jZTpcbiAqICAtIFtEZXZsaW4gZXQgYWwuLCAyMDE5XShodHRwczovL2FyeGl2Lm9yZy9hYnMvMTgxMC4wNDgwNSlcbiAqL1xuZXhwb3J0IGNsYXNzIFBvc2l0aW9uRW1iZWRkaW5nIGV4dGVuZHMgTGF5ZXIge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIHJlYWRvbmx5IGNsYXNzTmFtZSA9ICdQb3NpdGlvbkVtYmVkZGluZyc7XG5cbiAgY29uc3RydWN0b3IoYXJnczogUG9zaXRpb25FbWJlZGRpbmdBcmdzKSB7XG4gICAgc3VwZXIoYXJncyk7XG5cbiAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcignUG9zaXRpb25FbWJlZGRpbmcgbm90IGltcGxlbWVudGVkIHlldC4nKTtcbiAgfVxuXG4gIG92ZXJyaWRlIGdldENvbmZpZygpOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3Qge1xuICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0LicpO1xuICB9XG5cbiAgb3ZlcnJpZGUgYnVpbGQoaW5wdXRTaGFwZTogU2hhcGUgfCBTaGFwZVtdKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQuJyk7XG4gIH1cblxuICBvdmVycmlkZSBjYWxsKFxuICAgIGlucHV0czogVGVuc29yfFRlbnNvcltdLFxuICAgIGt3YXJnczogUG9zaXRpb25FbWJlZGRpbmdPcHRpb25zPXtzdGFydEluZGV4OiAwfVxuICApOiBUZW5zb3IxRHxUZW5zb3IyRCB7XG4gICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQuJyk7XG4gIH1cbn1cbnNlcmlhbGl6YXRpb24ucmVnaXN0ZXJDbGFzcyhQb3NpdGlvbkVtYmVkZGluZyk7XG4iXX0=